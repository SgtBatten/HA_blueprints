blueprint:
  name: Frigate Notifications (0.12.0.4e)
  author: SgtBatten
  homeassistant:
    min_version: 2024.6.0
  description: |
    ## Frigate Notifications

    This blueprint will send a notification to your device when a Frigate event for the selected camera is fired. The notification will initially include the thumbnail of the detection, but include an actionable notification allowing you to view the clip and snapshot.

    With this blueprint, you may send the notification to multiple devices by leaving "Device" blank and instead use a [notification group][1].

    ### Software Version Requirements
      - Minimum Home Assistant Version: 2024.6
      - Minimum Frigate Version: 0.11.0
      - Minimum Frigate Integration Version: 3.0.0
        - **Note:** "Enable the unauthenticated notification event proxy" must be ticked during setup
      - An MQTT broker connected to Home Assistant and Frigate.
      - Minimum iOS Version: 15.0

    ### Required entities:
      - Frigate Camera Name
      - Mobile Device (Running HA Companion App)

    ### Features:
      - Easily select the camera entity or mobile device using a drop-down menu.
      - Send notifications to an Android or iOS mobile device or a TV.
        - or a group containing any combination of the above.
        - for TV Alerts, you need to install and configure https://www.home-assistant.io/integrations/nfandroidtv/
      - Configure the title and message of the notification. 
      - Dynamically handle things like object type, zones, and face detection from doubletake.
      - Automatically handle some common errors like case matching and bad URLs etc.
      - Optionally send the notification as a critical alert. (Critical)
      - Optionally limit playing audio for secondary notification updates, and on iOS, customise the sound. (Alert Once)
      - Choose whether or not to update the notification with new thumbnails as they become available.
      - Customise the notification colour and icon.
      - Optionally send a live view to iOS.
      - Configure custom notification channels on Android.
      - Specify which [zones][2] to be notified about. (Zone Filter)
        - Choose between enforcing all required zones simultaneously or any one zone.
      - Specify what type of [objects][3] to be notified about. (Object Filter)
      - Disable notifications if a presence entity or group is "home". (Presence Filter)
      - Limit notifications based on the state of another entity. (State Filter)
      - Limit notifications to certain hours of the day. (Time Filter)
      - Configure a cooldown for the camera to reduce the number of notifications when back-to-back events occur.
      - Silence future notifications for a defined amount of time through actionable notifications. This is helpful in situations where you know you will be triggering detections for an extended period of time. i.e. kids playing outside.
      - Set a loitering timer to notify you of stationary objects that remain for a set time.
      - Configure what happens when you tap the notification. (Tap Action)
      - Configure 3 action buttons to open almost anything. (defaults are: View Clip, View Snapshot, and Silence New Notifications)
      - Configure the size, transparency, position, and duration of TV notifications.
      - Debug option to help with troubleshooting.
      - Support for multiple Frigate instances by specifying the ClientID and MQTT topic.
      - Optional delay to the initial notification to see if it resolves the no attached image issue.
      - Live view on iOS.
      - Android option: Sticky as per https://community.home-assistant.io/t/frigate-mobile-app-notifications/311091/1043
      - Add 5s delay to the final notification update to ensure Frigate has time to save snapshot edits (crop, bounding box, etc.) if "update thumbnail" is enabled. 
      - Add Video (gif) option to Android which will be sent 5 seconds after the event ends.
      - Subtitle support.
      - Video for iOS sent 5 seconds after the event ends.
      - Set custom entity for iOS live view.
      - Set Icons for Action Buttons on iOS.
      - Strip trailing underscores and numbers from the camera name. (This will break automation for anyone whose Frigate cam ends in _x.)
      - Android Auto option.
      - Custom Filter.
      - Customise group on mobile devices.
      - Bounding box and crop options for attachment.
      - Set notification volume on iOS
      - Integrates with Double Take to replace object labels with names if a face is matched.

    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
    [2]: https://blakeblackshear.github.io/frigate/configuration/cameras#zones
    [3]: https://blakeblackshear.github.io/frigate/configuration/objects

    ## Support
    Go to https://github.com/SgtBatten/HA_blueprints to report bugs, request new features, or get support with your configuration.

  domain: automation
  source_url: https://github.com/SgtBatten/HA_blueprints/blob/main/Frigate_Camera_Notifications/Beta.yaml
  input:
    camera:
      name: Frigate Camera
      description: |
        Select the camera entity that will trigger notifications. 
        If you do not see cameras listed in the drop-down, check you have the Frigate integration installed.

        Note: The automation relies on the Frigate camera name matching the entity id in Home Assistant. It will automatically strip "_x" from the end of the entity id where x is a number If your camera name in frigate ends in _x you need to manually edit the yaml of this automation to add it twice e.g camera.front_1_1.
      selector:
        entity:
          integration: frigate
          domain: camera
          device_class: camera
    notify_device:
      name: Mobile Device
      description: Select a device that runs the official Home Assistant app to receive notifications. If you wish to notify a group of devices and/or Android/Fire TV use the field below to override this selection. This will be ignored in that case but is still required.
      default: false
      selector:
        device:
          integration: mobile_app
    notify_group:
      name: Notification Group or Android/Fire TV (Optional)
      description: |
        The name of the group or individual TV to send notifications to.
        If set, this will override the individual devices above.

        Note: If the group contains both mobile devices and TVs, the TV will not display the snapshot unless "TV notifications" is set to true. However, this will stop Android phones from receiving thumbnails.
      default: ""
    base_url:
      name: Base URL (Optional)
      description: |
        The external URL for your Home Assistant instance. 
        Recommended for iOS and required for Android/Fire TV.
      default: ""
    mqtt_topic:
      name: MQTT Topic (Advanced)
      description: The MQTT topic Frigate sends messages in.
      default: frigate/events
    client_id:
      name: Client ID (Optional-Advanced)
      description: Used to support multiple instances of Frigate. Leave blank if you don't know what to do.
      default: ""
    notification_customisations:
      name: |
        # Notification Customisations
      description: These are Notification Customisation Options
      icon: mdi:bell
      collapsed: true
      input:
        title:
          name: Notification Title (Optional)
          description: |
            # Notification Customisations

            The title of the notification.
          default: ""
        message:
          name: Notification Message
          description: |
            The message of the notification.
            You can use variables such as {{camera_name}} and {{label}}
            e.g., A {{ label }} {{ 'is loitering' if loitering else 'was detected' }} on the {{ camera_name }} camera.

          default: A {{ label }} {{ 'is loitering' if loitering else 'was detected' }} on the {{ camera_name }} camera.
          selector:
            select:
              options:
                - label: "Default:   e.g., A Person was detected on the Side camera."
                  value: "A {{ label }} {{ 'is loitering' if loitering else 'was detected' }} on the {{ camera_name }} camera."
                - label: "Short:     e.g., Person detected - Side"
                  value: "{{ label }} detected - {{ camera_name }}"
                - label: "Short with a timestamp HH:MM"
                  value: "{{ label }} detected - {{ camera_name }} at {{event['after']['start_time']|timestamp_custom('%H:%M')}}"
                - label: "Long:      e.g., A Person was detected on the Side camera in the driveway."
                  value: "A {{ label }} {{ 'is loitering' if loitering else 'was detected' }} on the {{ camera_name }} camera{% if entered_zones %} in the {{ entered_zones | join(', ') | replace('_',' ') }}{% endif %}."
                - label: "Long with a timestamp HH:MM"
                  value: "A {{ label }} {{ 'is loitering' if loitering else 'was detected' }} on the {{ camera_name }} camera{% if entered_zones %} in the {{ entered_zones | join(', ') | replace('_',' ') }}{% endif %} at {{event['after']['start_time']|timestamp_custom('%H:%M')}}."
              custom_value: true
        update_sub_label:
          name: Update Sub Label (Advanced)
          description: |
            Update the title and/or message with the matched face name and trigger a notification update. 

            Requires face detection to be configured (Advanced). Requires Title and/or Message to contain 'A Person' or 'A {{ label }}'
          default: true
          selector:
            boolean:
        subtitle:
          name: Subtitle
          description: A secondary heading you can use in your notifications.
          default: ""
        critical:
          name: Critical Notification (Optional)
          description: |
            Send as a critical notification to the mobile device. This will ignore silent/vibrate modes.
            You can choose to limit critical notifications to certain times using a template (some examples are provided but you can enter your own as long as it outputs true or false)
          default: "false"
          selector:
            select:
              options:
                - "false"
                - "true"
                - "{{'false' if now().hour in [8,9,10,11,12,13,14,15,16,17,18] else 'true'}}"
                - "{{'true' if is_state('sun.sun', 'above_horizon') else 'false' }}"
                - "{{ event['after']['top_score'] |float(0) > 0.8 }}"
              custom_value: true
        tts:
          name: Use TTS to override silent/dnd modes on specific phones.
          description: |
            Some phones (the Samsung galaxy line, in particular,) disable the ability to use `alarm_stream` as a means to bypass the current sound settings. This option allows TTS to announce the alert instead, which does bypass the sound settings.
          default: false
          selector:
            boolean:
        tts_helper:
          name: Entity to store ids already alerted by TTS
          description: |
            In order for TTS to honor alert_once settings, create a text helper (/config/helpers), which will be used to store the ids for any tts alerts that have gone out. Set the maximum character count to 250 to store the latest 25 alert ids. Then select it here
          default: ""
          selector:
            entity:
              integration: input_text
        alert_once:
          name: Alert Once (Optional)
          description: Only the first notification for each event will play a sound. Updates, including new thumbnails, will be silent. iOS users who use Critical Notifications above will still hear default critical sounds for updates.
          default: false
          selector:
            boolean:
        attachment:
          name: Attachment
          description: |
            Choose which image to attach to the notification.

            Note: TVs will always get sent the snapshot if TV is true
          default: thumbnail.jpg
          selector:
            select:
              options:
                - label: Thumbnail
                  value: thumbnail.jpg
                - label: Snapshot
                  value: snapshot.jpg
                - label: Snapshot with bounding box
                  value: snapshot.jpg?bbox=1
                - label: Snapshot cropped
                  value: snapshot.jpg?crop=1
                - label: Snapshot cropped with bounding box
                  value: snapshot.jpg?bbox=1&crop=1
              mode: dropdown
        update_thumbnail:
          name: Update Image (Optional)
          description: Update the notification if a new "better" image is available.
          default: false
          selector:
            boolean:
        video:
          name: Video (Optional)
          description: You can optionally attach the clip to the notification which will replace the thumbnail/snapshot above, if available.
          default: ""
          selector:
            select:
              options:
                - label: None
                  value: ""
                - label: Clip
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
        color:
          name: Notification Color - Android/TV only (Optional)
          description: Set the color of the notification on your Android mobile device or TV.
          default: "#03a9f4"
          selector:
            select:
              options:
                - label: Primary (Steelblue)
                  value: "#03a9f4"
                - label: Red
                  value: "#f44336"
                - label: Pink
                  value: "#e91e63"
                - label: Purple
                  value: "#926bc7"
                - label: Deep Purple
                  value: "#6e41ab"
                - label: Indigo
                  value: "#3f51b5"
                - label: Blue
                  value: "#2196f3"
                - label: Light Blue
                  value: "#03a9f4"
                - label: Cyan
                  value: "#00bcd4"
                - label: Teal
                  value: "#009688"
                - label: Green
                  value: "#4caf50"
                - label: Light Green
                  value: "#8bc34a"
                - label: Lime
                  value: "#cddc39"
                - label: Yellow
                  value: "#ffeb3b"
                - label: Amber
                  value: "#ffc107"
                - label: Orange
                  value: "#ff9800"
                - label: Deep Orange
                  value: "#ff5722"
                - label: Brown
                  value: "#795548"
                - label: Light Grey
                  value: "#bdbdbd"
                - label: Grey
                  value: "#9e9e9e"
                - label: Dark Grey
                  value: "#606060"
                - label: Blue Grey
                  value: "#607d8b"
                - label: Black
                  value: "#000000"
                - label: White
                  value: "#ffffff"
        icon:
          name: Notification Icon (Optional)
          description: Change the icon that displays on the notification. You can enter a single icon or create a template like the example given in the dropdown. You must include 'mdi:' in the icon name.
          default: mdi:homeassistant
          selector:
            select:
              options:
                - mdi:homeassistant
                - mdi:cctv
                - "mdi:{{'account-outline' if label == 'Person' else 'dog' if label == 'Dog' else 'cat' if label == 'Cat' else 'car' if label == 'Car' else 'home-assistant'}}"
              custom_value: true
        group:
          name: Group
          description: The group name that will determine if notifications are grouped on your mobile device. If you want notifications grouped by camera, ensure it contains {{camera}}
          default: "{{camera}}-frigate-notification{{'-loitering' if loitering}}"
        sound:
          name: Notification Sound - iOS only (Optional)
          description: You can specify a sound file on your device that will play for the notifications. You will need to import the sound file into Home Assistant.
          default: default
          selector:
            select:
              options:
                - default
                - none
              custom_value: true
        volume:
          name: Volume Sound - iOS only (Optional)
          description: You can specify a sound level between 0 and 100
          default: 100
          selector:
            number:
              max: 100
              min: 0
              unit_of_measurement: "%"
              step: 1
              mode: slider
        ios_live_view:
          name: Live View Entity - iOS only (Optional)
          description: Attach a live view from the selected entity to the notification for iOS devices.
          default: ""
          selector:
            entity:
              domain: camera
        android_auto:
          name: Android Auto
          description: Show the notification on Android Auto if the receiving device is connected.
          default: false
          selector:
            boolean:
        sticky:
          name: Sticky - Android only (Optional)
          description: |
            When enabled, the notification will stay active on the device after tapping it and remain there until cleared.
          default: false
          selector:
            boolean:
        channel:
          name: Notification Channel - Android only (Optional)
          description: Create a new channel for notifications to allow custom notification sounds, vibration patterns, and override of Do Not Disturb mode. Configured directly on the device.
          default: ""
    filters:
      name: |
        # Filters
      description: These are Filter Options
      icon: mdi:filter
      collapsed: true
      input:
        condition_global:
          name: Add Condition(s) to run this Automation
          description: Add conditions if needed to run this automation at all. If conditions return `false`, no actions will fire.
          default: []
          selector:
            condition: {}
        zone_filter:
          name: Zone Filter on/off (Optional)
          description: Enable to only notify if an object has entered a zone listed below.
          default: false
          selector:
            boolean:
        zones:
          name: Required Zones (Optional - Enabled Above)
          description: |
            Enter the name of one zone at a time. It must be lowercase and include underscores as per your Frigate config.
            By default any zone is acceptable. If you desire ALL listed zones to be entered before getting a notification, enable the multi toggle below.
          default: []
          selector:
            select:
              options:
                - examples
                - porch
                - front_door
                - side
                - garden
              multiple: true
              custom_value: true
        zone_multi:
          name: Multi-Zone (Optional)
          description: Require all zones specified above to be entered, instead of any listed zone. Zone Filter must be enabled also.
          default: false
          selector:
            boolean:
        zone_order_enforced:
          name: Zone Order Enforced (Optional)
          description: |
            Combined with Multi-Zone, requires zones to be entered in the same order as their requirement. 
            Useful for alerting on arriving vehicles, while ignoring departing vehicles, for instance
          default: false
          selector:
            boolean:
        labels:
          name: Object Filter (Optional)
          description: |
            Specify objects you wish to be notified about. Enter or select one object at a time.
          default: ""
          selector:
            select:
              options:
                - person
                - dog
                - cat
                - car
                - package
                - bird
              multiple: true
              custom_value: true
        presence_filter:
          name: Presence Filter (Optional)
          description: Only notify if the selected presence entity is not "home".
          default: ""
          selector:
            entity:
              domain:
                - device_tracker
                - person
                - group
        state_filter:
          name: State Filter on/off (Optional)
          description: Enable the two State Filter settings below. Only notify if the selected entity is in the specified states.
          default: false
          selector:
            boolean:
        state_entity:
          name: State Filter Entity (Optional)
          description: Only notify if the selected entity is in the below state. You must enable "State Filter" above to use this.
          default: ""
          selector:
            entity:
        state_filter_states:
          name: State Filter States (Optional)
          description: Enter the states that the above entity must be in, one at a time.
          default: []
          selector:
            select:
              options: []
              multiple: true
              custom_value: true
        disable_times:
          name: Time Filter (Optional)
          description: Prevent notifications from being sent during the specified hours
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: 00:00 - 00:59
                  value: "0"
                - label: 01:00 - 01:59
                  value: "1"
                - label: 02:00 - 02:59
                  value: "2"
                - label: 03:00 - 03:59
                  value: "3"
                - label: 04:00 - 04:59
                  value: "4"
                - label: 05:00 - 05:59
                  value: "5"
                - label: 06:00 - 06:59
                  value: "6"
                - label: 07:00 - 07:59
                  value: "7"
                - label: 08:00 - 08:59
                  value: "8"
                - label: 09:00 - 09:59
                  value: "9"
                - label: 10:00 - 10:59
                  value: "10"
                - label: 11:00 - 11:59
                  value: "11"
                - label: 12:00 - 12:59
                  value: "12"
                - label: 13:00 - 13:59
                  value: "13"
                - label: 14:00 - 14:59
                  value: "14"
                - label: 15:00 - 15:59
                  value: "15"
                - label: 16:00 - 16:59
                  value: "16"
                - label: 17:00 - 17:59
                  value: "17"
                - label: 18:00 - 18:59
                  value: "18"
                - label: 19:00 - 19:59
                  value: "19"
                - label: 20:00 - 20:59
                  value: "20"
                - label: 21:00 - 21:59
                  value: "21"
                - label: 22:00 - 22:59
                  value: "22"
                - label: 23:00 - 23:59
                  value: "23"
        cooldown:
          name: Cooldown (Optional)
          description: Delay before sending another notification for this camera after the last event.
          default: 30
          selector:
            number:
              max: 86400
              min: 0
              unit_of_measurement: seconds
        custom_filter:
          name: Custom Filter (Optional - Advanced)
          description: A filter that must result in true or false but can be templated as necessary. You will need to ensure it is enclosed with appropriate \"quotes\" and \{\{brackets\}\}.
          default: true
    timers:
      name: |
        # Timers
      description: These are Timers you can customise
      icon: mdi:gesture-double-tap
      collapsed: true
      input:
        silence_timer:
          name: Silence New Object Notifications (Optional)
          description: |
            How long to silence notifications for this camera when requested as part of the actionable notification. 
            Note: This only applies to new objects. Existing tracked objects will not be affected.
          default: 30
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: minutes
        loiter_timer:
          name: Loitering Notifications (Optional)
          description: >
            Sends new loitering notification if a stationary object is detected for longer
            than the specified time. 0 is off and will not send notifications.
          default: 0
          selector:
            number:
              max: 3600
              min: 0
              unit_of_measurement: seconds
        initial_delay:
          name: Delay initial notification (Optional)
          description: |
            How long to delay the first notification for each event. 

            Use this if you DO NOT use "update image" and are experiencing notifications without attached images. Start with small numbers.
          default: 0
          selector:
            number:
              max: 15
              min: 0
              unit_of_measurement: seconds
    actions:
      name: |
        # Action Buttons and URLS
      description: These are Action Buttons and URL Options
      icon: mdi:gesture-double-tap
      collapsed: true
      input:
        tap_action:
          name: Tap Action URL
          description: |
            # Action Buttons and URLs

            The URL to open when tapping on the notification. Some presets are provided, you can also set your own by typing in the box. 

            These options define the text and URLs associated with the three action buttons at the bottom of the notification.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: View Clip
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: View Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: View Stream
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Open Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Open Home Assistant (app)
                  value: /lovelace
                - label: Open Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Open Frigate (Full Access)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Open Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Open Reolink App (Android)
                  value: app://com.mcu.reolink
                - label: Custom Action (Manual Trigger)
                  value: custom-{{ camera }}
              custom_value: true
        button_1:
          name: Action Button 1 Text
          description: 'The text used on the first Action button at the bottom of the notification. Set the URL below. (Default is "View Clip")'
          default: "View Clip"
        url_1:
          name: Action Button 1 URL
          description: Customise what happens when you press the first Action Button. Select from one of the preconfigured options or enter your own custom URL.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
          selector:
            select:
              options:
                - label: View Clip
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: View Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: View Stream
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Open Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Open Home Assistant (app)
                  value: /lovelace
                - label: Open Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Open Frigate (Full Access)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Open Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Open Reolink App (Android)
                  value: app://com.mcu.reolink
                - label: Custom Action (Manual Trigger)
                  value: custom-{{ camera }}
              custom_value: true
        icon_1:
          name: Action Button 1 icon - iOS Only
          description: Customise the Icon on the first Action Button. Only the iOS SFSymbols library is supported, not mdi:icons. e.g., sfsymbols:bell
          default: ""
        button_2:
          name: Action Button 2 Text
          description: "The text used on the second Action button at the bottom of the notification. Set the URL below."
          default: "View Snapshot"
        url_2:
          name: Action Button 2 URL
          description: Customise what happens when you press the second Action Button. Select from one of the preconfigured options or enter your own custom URL.
          default: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
          selector:
            select:
              options:
                - label: View Clip
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: View Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: View Stream
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Open Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Open Home Assistant (app)
                  value: /lovelace
                - label: Open Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Open Frigate (Full Access)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Open Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Open Reolink App (Android)
                  value: app://com.mcu.reolink
                - label: Custom Action (Manual Trigger)
                  value: custom-{{ camera }}
              custom_value: true
        icon_2:
          name: Action Button 2 icon - iOS Only
          description: Customise the Icon on the second Action Button. Only the iOS SFSymbols library is supported, not mdi:icons. e.g., sfsymbols:bell
          default: ""
        button_3:
          name: Action Button 3 Text
          description: "The text used on the third Action button at the bottom of the notification. Set the URL below."
          default: "Silence New Notifications"
        url_3:
          name: Action Button 3 URL
          description: Customise what happens when you press the third Action Button. Select from one of the preconfigured options or enter your own custom URL.
          default: silence-{{ camera }}
          selector:
            select:
              options:
                - label: Silence New Notifications
                  value: silence-{{ camera }}
                - label: View Clip
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                - label: View Snapshot
                  value: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                - label: View Stream
                  value: "{{base_url}}/api/camera_proxy_stream/camera.{{trigger.payload_json['after']['camera'] | lower | replace('-','_')}}?token={{state_attr( 'camera.' ~ camera, 'access_token')}}"
                - label: Open Home Assistant (web)
                  value: "{{base_url}}/lovelace"
                - label: Open Home Assistant (app)
                  value: /lovelace
                - label: Open Frigate
                  value: /ccab4aaf_frigate/dashboard
                - label: Open Frigate (Full Access)
                  value: /ccab4aaf_frigate-fa/dashboard
                - label: Open Frigate (proxy)
                  value: /ccab4aaf_frigate-proxy/dashboard
                - label: Open Reolink App (Android)
                  value: app://com.mcu.reolink
                - label: Custom Action (Manual Trigger)
                  value: custom-{{ camera }}
              custom_value: true
        icon_3:
          name: Action Button 3 icon - iOS Only
          description: Customise the Icon on the third Action Button. Only the iOS SFSymbols library is supported, not mdi:icons. e.g., sfsymbols:bell
          default: ""
        custom_action_manual:
          name: Custom Action (Manual Trigger)
          description: Customisable action that you can trigger with the Custom Action buttons in the notification. Select Custom Action on any Action Button above.
          selector:
            action: {}
          default: []
        custom_action_auto:
          name: Custom Action (Auto Trigger)
          description: Customisable action that will trigger on the initial notification (subject to all other notification conditions).
          selector:
            action: {}
          default: []
        custom_action_auto_multi:
          name: Custom Action (Auto Trigger in Loop)
          description: Customisable action that will trigger on all subsequent notifications (subject to all other notification conditions). If you want it to also trigger on the initial notification, you must enter it in both input fields.
          selector:
            action: {}
          default: []
    tv_notifications:
      name: |
        # TV Notifications
      description: These are TV Notification Options
      icon: mdi:television
      collapsed: true
      input:
        tv:
          name: TV Notification (Optional)
          description: |
            Set to true if you are notifying an Android/Fire TV
            Can also be used to prioritise snapshots on the TV over Android mobile apps when notifying a mixed device group.
            Base URL must be set

            The below settings are for TV notifications only
          default: false
          selector:
            boolean:
        tv_position:
          name: TV Notification Position (Optional)
          description: Set the position of the notification on your TV
          default: center
          selector:
            select:
              mode: dropdown
              options:
                - bottom-right
                - bottom-left
                - top-right
                - top-left
                - center
        tv_size:
          name: TV Notification Size (Optional)
          description: Set the size of the notification on your TV.
          default: large
          selector:
            select:
              mode: dropdown
              options:
                - small
                - medium
                - large
                - max
        tv_duration:
          name: TV Notification Duration (Optional)
          description: The duration (in seconds) that the notification will display on your TV.
          default: 10
          selector:
            number:
              max: 300
              min: 0
              unit_of_measurement: seconds
        tv_transparency:
          name: TV notification Transparency (Optional)
          description: Set the transparency of the notification on your TV.
          default: 0%
          selector:
            select:
              mode: dropdown
              options:
                - 0%
                - 25%
                - 50%
                - 75%
                - 100%
        tv_interrupt:
          name: TV Notification Interrupt (Optional)
          description: "If set to true the notification is interactive and can be dismissed or selected to display more details. Depending on the running app (e.g., Netflix), this may stop playback."
          default: false
          selector:
            boolean:
    debug:
      name: |
        # DEBUG
      description: These are DEBUG Options
      icon: mdi:bug
      collapsed: true
      input:
        debug:
          name: Debug
          description: Enable to send debug messages to the home assistant logbook.
          default: false
          selector:
            boolean:
mode: parallel
trigger_variables:
  input_camera: !input camera
  camera: "{{ input_camera | regex_replace('^camera\\.|_\\d+$', '') }}"
  mqtt_topic: !input mqtt_topic
trigger:
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "silence-{{ camera }}"
    id: silence
  - platform: mqtt
    topic: "{{mqtt_topic}}"
    payload: "{{ camera }}/new"
    value_template: "{{ value_json['after']['camera'] | lower | replace('-','_') }}/{{ value_json['type']}}"
    id: frigate-event
variables:
  input_camera: !input camera
  camera: "{{ input_camera | regex_replace('^camera\\.', '') }}"
  camera_name: "{{ camera | replace('_', ' ') | title }}"
  input_base_url: !input base_url
  base_url: "{{ input_base_url.rstrip('/')}}"
  update_sub_label: !input update_sub_label
  input_client_id: !input client_id
  client_id: "{{input_client_id if not input_client_id else '/' + input_client_id if '/' not in input_client_id else input_client_id }}"
  attachment: !input attachment
  alert_once: !input alert_once
  update_thumbnail: !input update_thumbnail
  ios_live_view: !input ios_live_view
  android_auto: !input android_auto
  notify_group: !input notify_group
  notify_group_target: "{{ notify_group | lower | regex_replace('^notify\\.', '') | replace(' ','_') }}"
  zone_only: !input zone_filter
  input_zones: !input zones
  zones: "{{ input_zones }}"
  zone_multi: !input zone_multi
  zone_order_enforced: !input zone_order_enforced
  input_labels: !input labels
  labels: "{{ input_labels | list | lower }}"
  presence_entity: !input presence_filter
  disable_times: !input disable_times
  cooldown: !input cooldown
  loitering: false
  loiter_timer: !input loiter_timer
  initial_delay: !input initial_delay
  fps: "{{ states('sensor.' + camera + '_camera_fps')|int(5) }}"
  state_only: !input state_filter
  input_entity: !input state_entity
  input_states: !input state_filter_states
  states_filter: "{{ input_states | list | lower }}"
  color: !input color
  sound: !input sound
  input_volume: !input volume
  volume: "{{ (1 * input_volume|int(100))/100 }}"
  sticky: !input sticky
  tv: !input tv
  tv_position: !input tv_position
  tv_size: !input tv_size
  tv_duration: !input tv_duration
  tv_transparency: !input tv_transparency
  tv_interrupt: !input tv_interrupt
  debug: !input debug
  condition_global: !input condition_global
action:
- if:
  - condition: !input condition_global
  then:
  - choose:
      - alias: "Silence New Object Notifications"
        conditions:
          - condition: trigger
            id: silence
        sequence:
          - service: automation.turn_off
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              stop_actions: false
          - delay:
              minutes: !input silence_timer
          - service: automation.turn_on
            target:
              entity_id: "{{ this.entity_id }}"
      - alias: "Custom Action Manual"
        conditions:
          - condition: trigger
            id: custom
        sequence: !input "custom_action_manual"
      - alias: "Frigate Event"
        conditions:
          - condition: trigger
            id: "frigate-event"
          - "{{ is_state(this.entity_id, 'on') }}"
          - "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > cooldown }}"
          - "{{ not disable_times|length or not now().hour in disable_times|map('int')|list }}"
        sequence:
          - variables:
              event: "{{ trigger.payload_json }}"
              id: "{{ trigger.payload_json['after']['id'] }}"
              object: "{{ trigger.payload_json['after']['label'] }}"
              label: "{{ object | title }}"
              # Dynamic Variables per event
              initial_home: "{{ presence_entity != '' and is_state(presence_entity, 'home') }}"
              entered_zones: "{{ trigger.payload_json['after']['entered_zones'] | default([]) }}"

              # Zones Variables
              # If no zones defined, or any zones have been entered
              any_zones_entered: "{{ zones | length == 0 or ((zones | select('in', entered_zones) | list | length) > 0) }}"
              zone_single_satisfied: "{{ any_zones_entered if zone_only else true}}"

              # If no zones defined, or all zones have been entered
              all_zones_entered: "{{ zones | length == 0 or ((zones | reject('in', entered_zones) | list | length) == 0) }}"
              zone_multi_satisfied: "{{ all_zones_entered if zone_only and zone_multi else true}}"

              # Compare the joined strings for equality is the simplest solution, due to both variables being defined in band.
              ordered_zones: "{{ zones | join('|') }}"
              ordered_entered_zones: "{{ entered_zones | join('|') }}"
              ordered_zones_match: "{{ ordered_zones == ordered_entered_zones }}"
              # Fails fast if prerequisite of zone or zone_multi is false, as they are pre-requisites
              zone_order_satisfied: "{{ (zone_only and zone_multi and ordered_zones_match) if zone_order_enforced else true }}"

              zones_satisfied: "{{zone_single_satisfied and zone_multi_satisfied and zone_order_satisfied}}"

              loitering: false
              # Customisation of text
              title: !input title
              message: !input message
              subtitle: !input subtitle
              tap_action: !input tap_action
              button_1: !input button_1
              button_2: !input button_2
              button_3: !input button_3
              url_1: !input url_1
              url_2: !input url_2
              url_3: !input url_3
              icon_1: !input icon_1
              icon_2: !input icon_2
              icon_3: !input icon_3
              # other things that can be templated and might need info from the event
              critical_input: !input critical
              critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
              tts: !input tts
              tts_helper: !input tts_helper
              custom_filter: !input custom_filter
              icon: !input icon
              group: !input group
              channel: !input channel
              video: !input video
              custom_action_auto: !input custom_action_auto
          - alias: "Debug: write to Log"
            choose:
              - conditions:
                  - "{{debug}}"
                sequence:
                  - service: logbook.log
                    data_template:
                      name: Frigate Notification
                      message: |
                        DEBUG: 
                          Info:
                            fps: {{fps}}, 
                            frigate event id: {{id}}{{', Frigate client ID: ' + client_id if client_id else ''}}, 
                            object (formatted): {{object}} ({{label}}),
                          Config: 
                            camera(formatted): {{camera}}({{camera_name}}), 
                            Base URL: {{base_url}}, 
                            critical: {{critical}}, 
                            tts: {{tts}} 
                            helper: {{tts_helper if tts else 'N/A'}},
                            alert once: {{alert_once}}, 
                            Update Thumbnails: {{update_thumbnail}}, 
                            Video: {{video}}, 
                            Target: {{'group (input/formatted): ' + notify_group + '/' + notify_group_target + ', ' if notify_group else 'Mobile Device'}}
                            cooldown: {{cooldown}}s, 
                            loiter timer: {{loiter_timer}}s, 
                            initial delay: {{initial_delay}}s, 
                            color: {{color}}, 
                            sound: {{sound}}, 
                            android_auto: {{android_auto}}, 
                            Group: {{group}}, 
                            Channel: {{channel}}, 
                            Sticky: {{sticky}}, 
                            Title: {{title}}, 
                            Message: {{message}},
                            Subtitle: {{subtitle}}, 
                            tap_action: {{tap_action}}, 
                            button 1 Text/URL/Icon: {{iif(button_1, button_1, 'unset')}} ({{url_1}}) {{icon_1}}, 
                            button 2 Text/URL/Icon: {{button_2}} ({{url_2}}) {{icon_2}}, 
                            button 3 Text/URL/Icon: {{button_3}} ({{url_3}}) {{icon_3}}, 
                            icon: {{icon}}
                            tv: {{ tv }}, 
                            tv_position: {{tv_position}}, 
                            tv_size: {{tv_size}}, 
                            tv_duration: {{tv_duration}}, 
                            tv_transparency: {{tv_transparency}}, 
                            tv_interrupt: {{tv_interrupt}}, 
                          Filters: 
                            Zones: 
                              Zone Filter toggle on: {{zone_only}}, 
                              Multi-Zone toggle on: {{zone_multi}}, 
                              Required zones: {{input_zones}}, 
                              Zone Order toggle on: {{zone_order_enforced}}
                              Entered Zones: {{entered_zones}},
                              TEST: {{'PASS' if zones_satisfied else 'FAIL' }} {{'(Multi)' if zone_only and zone_multi}} {{'(Order-Enforced)' if zone_only and zone_multi and zone_order_enforced}}, 
                            Required objects TEST: 
                              Input: {{input_labels}}, 
                              TEST: {{'PASS' if not labels|length or object in labels else 'FAIL'}}
                            presence entity (not home):
                              Entity: {{presence_entity}}
                              TEST:  {{'PASS' if not initial_home else 'FAIL'}}, 
                            disabled times: {{disable_times}}, 
                            State Filter: 
                              State Filter toggle on: {{state_only}}, 
                              State Filter Entity: {{input_entity}}, 
                              Required States: {{input_states}}, 
                              TEST: {{'PASS' if not state_only or states(input_entity) in states_filter else 'FAIL' }},
                            Custom Filter: {{custom_filter}}
          - alias: "Notifications enabled for object label"
            condition: template
            value_template: "{{ not labels|length or object in labels }}"
          - alias: "Delay for image"
            choose:
              - conditions:
                  - "{{initial_delay > 0}}"
                sequence:
                  - delay:
                      seconds: "{{initial_delay}}"
          - alias: "Custom Action Auto"
            choose:
              - conditions:
                  - "{{ custom_action_auto |length > 0 }}"
                  - "{{ zones_satisfied }}"
                  - "{{ not initial_home }}"
                  - "{{ not state_only or states(input_entity) in states_filter }}"
                sequence: !input "custom_action_auto"
          - alias: "Notify on new object"
            choose:
              - conditions:
                  - "{{ zones_satisfied }}"
                  - "{{ not initial_home }}"
                  - "{{ not state_only or states(input_entity) in states_filter }}"
                  - "{{ custom_filter }}"
                sequence:
                  - choose:
                      - conditions: "{{ not notify_group_target }}"
                        sequence:
                          - device_id: !input notify_device
                            domain: mobile_app
                            type: notify
                            title: "{{title}}"
                            message: "{{message}}"
                            data:
                              tag: "{{ id }}"
                              group: "{{ group }}"
                              color: "{{color}}"
                              # Android Specific
                              subject: "{{subtitle}}"
                              image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                              video: "{{video}}"
                              clickAction: "{{tap_action}}"
                              ttl: 0
                              priority: high
                              notification_icon: "{{icon}}"
                              sticky: "{{sticky}}"
                              channel: "{{'alarm_stream' if critical else channel}}"
                              car_ui: "{{android_auto}}"
                              # iOS Specific
                              subtitle: "{{subtitle}}"
                              url: "{{tap_action}}"
                              attachment:
                                url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                              push:
                                sound:
                                  name: "{{sound}}"
                                  volume: "{{ iif(sound == 'none', 0, volume) }}"
                                  critical: "{{ iif(critical, 1, 0) }}"
                              entity_id: "{{ios_live_view}}"
                              # Actions
                              actions:
                                - action: URI
                                  title: "{{button_1}}"
                                  uri: "{{url_1}}"
                                  icon: "{{icon_1}}"
                                - action: URI
                                  title: "{{button_2}}"
                                  uri: "{{url_2}}"
                                  icon: "{{icon_2}}"
                                - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                  title: "{{button_3}}"
                                  uri: "{{url_3}}"
                                  icon: "{{icon_3}}"
                                  destructive: true
                      - conditions: "{{ tv }}"
                        sequence:
                          - service: "notify.{{ notify_group_target }}"
                            data:
                              title: "{{title}}"
                              message: "{{message}}"
                              data:
                                tag: "{{ id }}"
                                group: "{{ group }}"
                                color: "{{color}}"
                                # Android Specific
                                subject: "{{subtitle}}"
                                clickAction: "{{tap_action}}"
                                ttl: 0
                                priority: high
                                notification_icon: "{{icon}}"
                                sticky: "{{sticky}}"
                                channel: "{{'alarm_stream' if critical else channel}}"
                                car_ui: "{{android_auto}}"
                                # Android/Fire TV
                                image:
                                  url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                                fontsize: "{{tv_size}}"
                                position: "{{tv_position}}"
                                duration: "{{tv_duration}}"
                                transparency: "{{tv_transparency}}"
                                interrupt: "{{tv_interrupt}}"
                                timeout: 30
                                # iOS Specific
                                subtitle: "{{subtitle}}"
                                url: "{{tap_action}}"
                                attachment:
                                  url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                                push:
                                  sound:
                                    name: "{{sound}}"
                                    volume: "{{ iif(sound == 'none', 0, volume) }}"
                                    critical: "{{ iif(critical, 1, 0) }}"
                                entity_id: "{{ios_live_view}}"
                                # Actions
                                actions:
                                  - action: URI
                                    title: "{{button_1}}"
                                    uri: "{{url_1}}"
                                    icon: "{{icon_1}}"
                                  - action: URI
                                    title: "{{button_2}}"
                                    uri: "{{url_2}}"
                                    icon: "{{icon_2}}"
                                  - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                    title: "{{button_3}}"
                                    uri: "{{url_3}}"
                                    icon: "{{icon_3}}"
                                    destructive: true
                    default:
                      - service: "notify.{{ notify_group_target }}"
                        data:
                          title: "{{title}}"
                          message: "{{message}}"
                          data:
                            tag: "{{ id }}"
                            group: "{{ group }}"
                            color: "{{color}}"
                            # Android Specific
                            subject: "{{subtitle}}"
                            image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                            video: "{{video}}"
                            clickAction: "{{tap_action}}"
                            ttl: 0
                            priority: high
                            notification_icon: "{{icon}}"
                            sticky: "{{sticky}}"
                            channel: "{{'alarm_stream' if critical else channel}}"
                            car_ui: "{{android_auto}}"
                            # Android/Fire TV
                            subtitle: "{{subtitle}}"
                            fontsize: "{{tv_size}}"
                            position: "{{tv_position}}"
                            duration: "{{tv_duration}}"
                            transparency: "{{tv_transparency}}"
                            interrupt: "{{tv_interrupt}}"
                            # iOS Specific
                            url: "{{tap_action}}"
                            attachment:
                              url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                            push:
                              sound:
                                name: "{{sound}}"
                                volume: "{{ iif(sound == 'none', 0, volume) }}"
                                critical: "{{ iif(critical, 1, 0) }}"
                            entity_id: "{{ios_live_view}}"
                            # Actions
                            actions:
                              - action: URI
                                title: "{{button_1}}"
                                uri: "{{url_1}}"
                                icon: "{{icon_1}}"
                              - action: URI
                                title: "{{button_2}}"
                                uri: "{{url_2}}"
                                icon: "{{icon_2}}"
                              - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                title: "{{button_3}}"
                                uri: "{{url_3}}"
                                icon: "{{icon_3}}"
                                destructive: true

                  - if: "{{tts and (not tts_helper or not alert_once or (tts_helper and id not in states(tts_helper)))}}"
                    then:
                      sequence:
                        - choose:
                            - conditions: "{{ not notify_group_target }}"
                              sequence:
                                - device_id: !input notify_device
                                  domain: mobile_app
                                  type: notify
                                  message: "{{'TTS'}}"
                                  data:
                                    tag: "{{ id }}{{'-tts'}}"
                                    channel: "{{'alarm_stream' if critical else channel}}"
                                    alert_once: "{{ alert_once }}"
                                    tts_text: "{{message}}"
                          default:
                            - service: "notify.{{ notify_group_target }}"
                              data:
                                message: "{{'TTS'}}"
                                data:
                                  tag: "{{ id }}{{'-tts'}}"
                                  channel: "{{'alarm_stream' if critical else channel}}"
                                  alert_once: "{{ alert_once }}"
                                  tts_text: "{{message}}"
                        - service: input_text.set_value
                          data:
                            value: |
                              {% set newIds = id + '|' + states(tts_helper) %}
                              {{ newIds[:250] }}
                          target:
                            entity_id: input_text.tts_notifications
          - repeat:
              sequence:
                - wait_for_trigger:
                    - platform: mqtt
                      topic: "{{mqtt_topic}}"
                      payload: "{{ id }}"
                      value_template: "{{ value_json['after']['id'] }}"
                  timeout:
                    minutes: 2
                  continue_on_timeout: false
                - variables:
                    event: "{{ wait.trigger.payload_json }}"
                    loitering: "{{ loiter_timer and event['before']['motionless_count']/fps/60 < loiter_timer and event['after']['motionless_count']/fps/60 >= loiter_timer }}"
                    new_snapshot: "{{ update_thumbnail and event['before']['snapshot']['frame_time'] != event['after']['snapshot']['frame_time'] }}"
                    home: "{{ presence_entity != '' and is_state(presence_entity, 'home') }}"
                    presence_changed: "{{ presence_entity != '' and as_datetime(event['before']['frame_time']) < states[presence_entity].last_changed }}"
                    last_zones: "{{ event['before']['entered_zones'] | lower}}"
                    entered_zones: "{{ event['after']['entered_zones'] | lower | default([]) }}"

                    # Zones Variables
                    # If no zones defined, or any zones have been entered
                    any_zones_entered: "{{ zones | length == 0 or ((zones | select('in', entered_zones) | list | length) > 0) }}"
                    zone_single_satisfied: "{{ any_zones_entered if zone_only else true}}"

                    # If no zones defined, or all zones have been entered
                    all_zones_entered: "{{ zones | length == 0 or ((zones | reject('in', entered_zones) | list | length) == 0) }}"
                    zone_multi_satisfied: "{{ all_zones_entered if zone_only and zone_multi else true}}"

                    # Compare the joined strings for equality is the simplest solution, due to both variables being defined in band.
                    ordered_zones: "{{ zones | join('|') }}"
                    ordered_entered_zones: "{{ entered_zones | join('|') }}"
                    ordered_zones_match: "{{ ordered_zones == ordered_entered_zones }}"
                    # Fails fast if prerequisite of zone or zone_multi is false, as they are pre-requisites
                    zone_order_satisfied: "{{ (zone_only and zone_multi and ordered_zones_match) if zone_order_enforced else true }}"

                    zones_satisfied: "{{zone_single_satisfied and zone_multi_satisfied and zone_order_satisfied}}"

                    new_entered_zones: "{{ zones | select('in', entered_zones) | list }}"
                    last_entered_zones: "{{ zones | select('in', last_zones) | list }}"
                    entered_new_zones: "{{ zone_only and (entered_zones | length > last_zones | length) }}"
                    entered_new_filter_zones: "{{ zone_only and zones | length > 0 and (new_entered_zones | length > last_entered_zones | length) }}"

                    stationary_moved: "{{ event['after']['position_changes'] > event['before']['position_changes'] }}"

                    state_true: "{{ not state_only or states(input_entity) in states_filter }}"
                    sub_label: >
                      {% if event['after']['sub_label'] %} 
                        {{event['after']['sub_label'][0]}}
                      {%else%}
                        {{event['after']['sub_label']}}
                      {%endif%}
                    sub_label_before: >
                      {% if event['before']['sub_label'] %} 
                        {{event['before']['sub_label'][0]}}
                      {%else%}
                        {{event['before']['sub_label']}}
                      {%endif%}
                    sub_label_changed: "{{ update_sub_label and sub_label != sub_label_before }}"
                    update: "{{ alert_once or (new_snapshot and not loitering and not presence_changed and not zone_only_changed and not entered_zones_changed and not sub_label_changed) }}"
                    critical_input: !input critical
                    critical: "{{ true if critical_input == 'true' else true if critical_input == True else false }}"
                    tts: !input tts
                    title: >
                      {% if sub_label and update_sub_label %} 
                        {{title | replace('A Person', sub_label|title) | replace('Person', sub_label|title)}}
                      {%else%}
                        {{title}}
                      {%endif%}
                    input_message: !input message
                    message: >
                      {% if sub_label and update_sub_label %} 
                        {{input_message | replace('A Person', sub_label|title) | replace('Person', sub_label|title)}}
                      {%else%}
                        {{input_message}}
                      {%endif%}
                    custom_action_auto_multi: !input custom_action_auto_multi
                - alias: "Update thumbnail at end of event"
                  choose:
                    - conditions:
                        - "{{wait.trigger.payload_json['type'] == 'end' }}"
                        - "{{('snapshot' in attachment and update_thumbnail) or video|length > 0}}"
                      sequence:
                        - delay:
                            seconds: 5
                        - variables:
                            new_snapshot: "{{update_thumbnail}}"
                - alias: "Debug: write to Log"
                  choose:
                    - conditions:
                        - "{{debug}}"
                      sequence:
                        - service: logbook.log
                          data_template:
                            name: Frigate Notification
                            message: |
                              DEBUG (in loop): 
                                Send Notification: {{ loitering or (custom_filter and not home and zones_satisified and state_true and (new_snapshot or presence_changed or stationary_moved or entered_new_zones or entered_new_filter_zones or sub_label_changed)) }}
                                Info: 
                                  sublabel: {{sub_label}}, 
                                  image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}"
                                  Title: {{title}}
                                  message: {{message}}
                                  iOS sound: {{'Critical' if critical else 'disabled by alert once' if alert_once else 'enabled'}}, 
                                  Android Sound: {{'disabled by alert once' if alert_once else 'enabled'}}, 
                                  iOS url: /api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}
                                  video: "{{video}}"
                                  critical: {{critical}},
                                  tts: {{tts}} 
                                Triggers: 
                                  New Snapshot: {{'True' if event['before']['snapshot']['frame_time'] != event['after']['snapshot']['frame_time'] else 'False'}}{{' - Disabled' if not update_thumbnail}} 
                                  Presence Changed: {{presence_changed}}, 
                                  Stationary Moved: {{stationary_moved}}, 
                                  Entered Zones Changed: {{'True' if event['before']['entered_zones'] != event['after']['entered_zones'] else 'False'}}{{' - Disabled' if not zone_only}}, 
                                  sublabel changed: {{ sub_label != sub_label_before }}{{' - Disabled' if not update_sub_label}}, 
                                Conditions: 
                                  Loitering: {{loitering}}
                                    or
                                  Filters: 
                                    Zones: 
                                      Zone Filter toggle on: {{zone_only}}, 
                                      Multi-Zone toggle on: {{zone_multi}}, 
                                      Required zones: {{input_zones}}, 
                                      Zone Order toggle on: {{zone_order_enforced}}
                                      Last Zones: {{last_zones}}, 
                                      Entered Zones: {{ entered_zones | list | length }} - {{entered_zones}},
                                      TEST: {{'PASS' if zones_satisfied else 'FAIL' }} {{'(Multi)' if zone_only and zone_multi}} {{'(Order-Enforced)' if zone_only and zone_multi and zone_order_enforced}},         
                                    Object Filter: 
                                      Input: {{input_labels}}, 
                                      TEST: {{'PASS' if not labels|length or object in labels else 'FAIL'}}, 
                                    Presence entity (not home):
                                      Entity: {{presence_entity}}, 
                                      TEST:  {{'PASS' if not home else 'FAIL'}}, 
                                    Time Filter:
                                      Disabled times: {{disable_times}}, 
                                      TEST: {{'PASS' if now().hour not in disable_times else 'FAIL'}}
                                    State Filter: 
                                      State Filter toggle on: {{state_only}}, 
                                      State Filter Entity: {{input_entity}}, 
                                      Required States: {{input_states}}, 
                                      TEST: {{'PASS' if state_true else 'FAIL'}}, 
                                    Custom Filter: {{'PASS' if custom_filter else 'FAIL'}},
                - alias: "Custom Action Auto Multi"
                  choose:
                    - conditions:
                        - "{{ custom_action_auto_multi | length > 0 }}"
                        - "{{ loitering or (not home and zones_satisfied and state_true and (new_snapshot or presence_changed or stationary_moved or entered_new_zones or entered_new_filter_zones or sub_label_changed)) }}"
                      sequence: !input "custom_action_auto_multi"
                - alias: "Update Notification"
                  choose:
                    - conditions: "{{ loitering or (custom_filter and not home and zones_satisfied and state_true and (new_snapshot or presence_changed or stationary_moved or entered_new_zones or entered_new_filter_zones or sub_label_changed)) }}"
                      sequence:
                        - choose:
                            - conditions: "{{ not notify_group_target }}"
                              sequence:
                                - device_id: !input notify_device
                                  domain: mobile_app
                                  type: notify
                                  title: "{{title}}"
                                  message: "{{message}}"
                                  data:
                                    tag: "{{ id }}{{'-loitering' if loitering}}"
                                    group: "{{ group }}"
                                    color: "{{color}}"
                                    # Android Specific
                                    subject: "{{subtitle}}"
                                    image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                                    video: "{{video}}"
                                    clickAction: "{{tap_action}}"
                                    ttl: 0
                                    priority: high
                                    alert_once: "{{ alert_once }}"
                                    notification_icon: "{{icon}}"
                                    sticky: "{{sticky}}"
                                    channel: "{{'alarm_stream' if critical else channel}}"
                                    car_ui: "{{android_auto}}"
                                    # iOS Specific
                                    subtitle: "{{subtitle}}"
                                    url: "{{tap_action}}"
                                    attachment:
                                      url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                    push:
                                      sound:
                                        name: "{{ iif(update, 'none', sound) }}"
                                        volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                        critical: "{{ iif(critical, 1, 0) }}"
                                    entity_id: "{{ios_live_view}}"
                                    # Actions
                                    actions:
                                      - action: URI
                                        title: "{{button_1}}"
                                        uri: "{{url_1}}"
                                        icon: "{{icon_1}}"
                                      - action: URI
                                        title: "{{button_2}}"
                                        uri: "{{url_2}}"
                                        icon: "{{icon_2}}"
                                      - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                        title: "{{button_3}}"
                                        uri: "{{url_3}}"
                                        icon: "{{icon_3}}"
                                        destructive: true
                            - conditions: "{{ tv }}"
                              sequence:
                                - service: "notify.{{ notify_group_target }}"
                                  data:
                                    title: "{{title}}"
                                    message: "{{message}}"
                                    data:
                                      tag: "{{ id }}{{'-loitering' if loitering}}"
                                      group: "{{ group }}"
                                      color: "{{color}}"
                                      # Android Specific
                                      subject: "{{subtitle}}"
                                      clickAction: "{{tap_action}}"
                                      ttl: 0
                                      priority: high
                                      alert_once: "{{ alert_once }}"
                                      notification_icon: "{{icon}}"
                                      sticky: "{{sticky}}"
                                      channel: "{{'alarm_stream' if critical else channel}}"
                                      car_ui: "{{android_auto}}"
                                      # Android/Fire TV
                                      image:
                                        url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/snapshot.jpg"
                                      video: "{{video}}"
                                      fontsize: "{{tv_size}}"
                                      position: "{{tv_position}}"
                                      duration: "{{tv_duration}}"
                                      transparency: "{{tv_transparency}}"
                                      interrupt: "{{tv_interrupt}}"
                                      timeout: 30
                                      # iOS Specific
                                      subtitle: "{{subtitle}}"
                                      url: "{{tap_action}}"
                                      attachment:
                                        url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                      push:
                                        sound:
                                          name: "{{ iif(update, 'none', sound) }}"
                                          volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                          critical: "{{ iif(critical, 1, 0) }}"
                                      entity_id: "{{ios_live_view}}"
                                      # Actions
                                      actions:
                                        - action: URI
                                          title: "{{button_1}}"
                                          uri: "{{url_1}}"
                                          icon: "{{icon_1}}"
                                        - action: URI
                                          title: "{{button_2}}"
                                          uri: "{{url_2}}"
                                          icon: "{{icon_2}}"
                                        - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                          title: "{{button_3}}"
                                          uri: "{{url_3}}"
                                          icon: "{{icon_3}}"
                                          destructive: true
                          default:
                            - service: "notify.{{ notify_group_target }}"
                              data:
                                title: "{{title}}"
                                message: "{{message}}"
                                data:
                                  tag: "{{ id }}{{'-loitering' if loitering}}"
                                  group: "{{ group }}"
                                  color: "{{color}}"
                                  # Android Specific
                                  subject: "{{subtitle}}"
                                  image: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{attachment}}{{'&' if '?' in attachment else '?'}}format=android"
                                  video: "{{video}}"
                                  clickAction: "{{tap_action}}"
                                  ttl: 0
                                  priority: high
                                  alert_once: "{{ alert_once }}"
                                  notification_icon: "{{icon}}"
                                  sticky: "{{sticky}}"
                                  channel: "{{'alarm_stream' if critical else channel}}"
                                  car_ui: "{{android_auto}}"
                                  # Android/Fire TV
                                  fontsize: "{{tv_size}}"
                                  position: "{{tv_position}}"
                                  duration: "{{tv_duration}}"
                                  transparency: "{{tv_transparency}}"
                                  interrupt: "{{tv_interrupt}}"
                                  # iOS Specific
                                  subtitle: "{{subtitle}}"
                                  url: "{{tap_action}}"
                                  attachment:
                                    url: "{{base_url}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera + '/clip.mp4' if video|length>0 and wait.trigger.payload_json['type'] == 'end' else attachment }}"
                                  push:
                                    sound:
                                      name: "{{ iif(update, 'none', sound) }}"
                                      volume: "{{ iif((update or sound == 'none'), 0, volume) }}"
                                      critical: "{{ iif(critical, 1, 0) }}"
                                  entity_id: "{{ios_live_view}}"
                                  # Actions
                                  actions:
                                    - action: URI
                                      title: "{{button_1}}"
                                      uri: "{{url_1}}"
                                      icon: "{{icon_1}}"
                                    - action: URI
                                      title: "{{button_2}}"
                                      uri: "{{url_2}}"
                                      icon: "{{icon_2}}"
                                    - action: "{{ 'URI' if '/' in url_3 else url_3 }}"
                                      title: "{{button_3}}"
                                      uri: "{{url_3}}"
                                      icon: "{{icon_3}}"
                                      destructive: true

                        - if: "{{tts and (not tts_helper or not alert_once or (tts_helper and id not in states(tts_helper)))}}"
                          then:
                            sequence:
                              - choose:
                                  - conditions: "{{ not notify_group_target }}"
                                    sequence:
                                      - device_id: !input notify_device
                                        domain: mobile_app
                                        type: notify
                                        message: "{{'TTS'}}"
                                        data:
                                          tag: "{{ id }}{{'-loitering-tts' if loitering}}"
                                          channel: "{{'alarm_stream' if critical else channel}}"
                                          alert_once: "{{ alert_once }}"
                                          tts_text: "{{message}}"

                                default:
                                  - service: "notify.{{ notify_group_target }}"
                                    data:
                                      message: "{{'TTS'}}"
                                      data:
                                        tag: "{{ id }}{{'-loitering-tts' if loitering}}"
                                        channel: "{{'alarm_stream' if critical else channel}}"
                                        alert_once: "{{ alert_once }}"
                                        tts_text: "{{message}}"
                              - service: input_text.set_value
                                data:
                                  value: |
                                    {% set newIds = id + '|' + states(tts_helper) %}
                                    {{ newIds[:250] }}
                                target:
                                  entity_id: input_text.tts_notifications
              until: "{{ not wait.trigger or wait.trigger.payload_json['type'] == 'end' }}"
